Read the README file first.

As of version 0.6.0 curlpp has been built and run on win32.
However, keep in mind that win32 is not the main development platform:
support and fixes won't likely come as easily as on Unixes.

Information contained in this file does not apply to cygwin builds.

curlpp has been tested on Microsoft 
Visual C++ 7.1 (2003),              (by Giuseppe "Cowo" Corbelli)
Microsoft Visual C++ 8.0 (2005),    (by Andrei Korostelev)
Microsoft Visual C++ 9.0 (2008),    (by Piotr Dobrogost)
but any modern C++ compiler should do the job.

BUILDING CURLPP WITH MSVC
-------------------------

BUILDING CURLPP

Either build curlpp from MS Visual Studio IDE or use msbuild tool to build curlpp from command line.

Building from command line

Steps to build curlpp:
	Open a command prompt where curlpp sources are

	set LIBCURL_PATH=/where/curl/is/installed
	set OPENSSL_PATH=/where/openssl/is/installed (only if you have libcurl with ssl support and ssl installed)
	msbuild curlpp.sln /t:Rebuild /p:Configuration=<Configuration>
		where <Configuration> is one of
		- ReleaseDynamic
		- ReleaseStatic
		- DebugDynamic
		- DebugStatic
		for VC8 solution file and is one of
		- DynamicLibDebugDynamicRTL
		- DynamicLibDebugStaticRTL
		- DynamicLibReleaseDynamicRTL
		- DynamicLibReleaseStaticRTL
		- StaticLibDebugDynamicRTL
		- StaticLibDebugStaticRTL
		- StaticLibReleaseDynamicRTL
		- StaticLibReleaseStaticRTL
		for VC9 solution file.
		
	Output files will be in <Configuration> directory.
	
	ReleaseDynamic/DebugDynamic or any of DynamicLib* configurations will build a .dll library file 
	and a .lib library import file;
	ReleaseStatic/DebugStatic or any of StaticLib* configurations will build the .lib static (inline) library.
	
Building from IDE

	Open one of libcurl.VCX.sln solution files in VC IDE, where X=7(7.1) or X=8 or x=9 is the version of VC.

	Choosing configuration

	Choose configuration you would like to build. What configuration you want depens on three aspects.
    1. Weather you want to build dynamic library (dll) or static library (lib). 
	   Choose configuration with DynamicLib or StaticLib prefix.
	2. Weather you want to build debug or release version of the library.
	   Choose configuration with Debug or Release infix.
	3. Weather you want static runtime library (RTL) to be used by cURLpp or dynamic one.
       Choose configuration with StaticRTL or DynamicRTL suffix.
	   
	Names' suffixes of output .lib and .dll files depend on the last two choices.
	MT  - release, static RTL
	MTd - debug, static RTL
	MD  - release, dynamic RTL
	MDd - debug, dynamic RTL
	We will refer to these suffixes and types of libraries as "build category" further in this document.

	Setting include directory
	
	If you are building cURLpp using the original directory structure then you don't need to set value of user macro 
	CURLPP_PATH which by default has value ".\". If however you modified the original directory structure you have
	to set value of this macro to path, where you have cURLpp source files.
	

	NOTES
	
	Linking with libcurl
	
	All versions of this library need libcurl (c library) include files to compile and lib file to link successfully.
	To compile libcurl in VC9 (2008) you can use solution file libcurl.VC9.sln which you can find in this distribution.
	To build cURLpp you first have to set value of LIBCURL_PATH user macro to your installation of libcurl.
	This macro is used in the project file for VC9 to find include and lib files of libcurl.
	Steps to set user macro. Select View/Property Manager, double-click curlpp property sheet, go to
	Common Properties/User Macros/, double-click name of macro you want to modify, modify it and click OK.
    Filename of libcurl's lib file should be in the form libcurlX.lib where X denotes build category chosen for cURLpp.
	(sse Linking with RTL)
	If it has different name you have to change .lib filename in
	Project properties\Librarian\Additional Dependencies (when building static library)
	or
	Project properties\Linker\Input\Additional Dependencies (when building dynamic library).
	

	Linking with static libcurl
	
	If you are not going to use libcurl as a dll and you would like to include it into your library/executable by
	linking to static version of libcurl you have to define preprocessor symbol CURL_STATICLIB. You can do it in
	Project/Properties/C/C++/Preprocessor/Preprocessor Definitions.
	By default all StaticLib* configurations define this symbol. If for some reason you would like to build static
	cURLpp library which links do dynamic libcurl library you have to remove CURL_STATICLIB define.

	
	Linking with RTL
	
	You have to link with libcurl which uses RTL in the same way as you are going to use RTL in cURLpp lib.
	Refering to build categories defined earlier in section "Choosing configuration" both libcurl and cURLpp
	must have the same build category.
	If you are going to use dynamic RTL in curlpp (MD[x]), use libcurl which also uses dynamic RTL (MD[x]).
	If you are going to use static RTL in curlpp (MT[x]), use libcurl which also uses static RTL (MT[x]).
	You can use debug build of libcurl (MDd or MTd) in the release build of cURLpp (MD or MT) and
	you can use release build of libcurl (MD or MT) in the debug build of cURLpp (MDd or MTd).
	However you shouldn't do this.

	
	Using cURLpp in .NET applications 
	
	If you are going to use cURLpp library in a .NET project you have to use dynamic RTL.
	This is because all .NET applications must use dynamic RTL and if your application uses cURLpp,
	the library itself has to use dynamic RTL as well.

	
	Additional dependencies
	
	All dynamic versions of library need the following system lib files to link successfully
	WSock32.lib, Wldap32.lib
	These files comes with WindowsSDK. Macro $(FrameworkSDKDir) is used in the solution file 
	for VC9 to find this libraries.

	
	Linking with OpenSSL
	
	If you have libcurl compiled with OpenSSL support and want to have support for OpenSSL in cURLpp as well
	you have to set value of OPENSSL_PATH user macro to your installation of OpenSSL before building cURLpp.
	This variable is used in the project file for VC9 to find include and lib files of OpenSSL.
	Steps to set user macro. Select View/Property Manager, double-click curlpp property sheet, go to
	Common Properties/User Macros/, double-click name of macro you want to modify, modify it and click OK.
	You have to link with OpenSSL which uses RTL in the same way as you are going to use RTL in cURLpp lib.
	Refering to build categories defined earlier in section "Choosing configuration" both OpenSSL and cURLpp
	must have the same build category.
    Filenames of OpenSSL lib files should be in the form libeay32X.lib and ssleay32X.lib, where X denotes
	build category chosen for cURLpp. You have to add both this filenames to
	Project properties\Librarian\Additional Dependencies (when building static library)
	or
	Project properties\Linker\Input\Additional Dependencies (when building dynamic library).

	If you need OpenSSL for Windows platform take a look at http://www.slproweb.com/products/Win32OpenSSL.html
	If you installed OpenSSL downloaded from the above link you'll find .lib files of all four build categories
	in the /lib/vc directory.
	
	
	Project propery sheet
	
	All user macros like LIBCURL_PATH, CURLPP_PATH, OPENSSL_PATH, BOOST_PATH etc. are defined in project property sheet
	file named curlpp.VC9.vsprops. In this file there are also defined options common to all configurations 
	of cURLpp project file.

	
	Building with Boost
	
	cURLpp has ability to use some features from the Boost library. If you want to build cURLpp with support for Boost
	you have to set value of BOOST_PATH user macro to your installation of Boost before building cURLpp.
	This variable is used in the project file for VC9 to find include files of Boost.
	You also have to define preprocessor symbol HAVE_BOOST. You can do it in
	Project/Properties/C/C++/Preprocessor/Preprocessor Definitions.
	

BUILDING CURLPP EXAMPLES

Building from command line

	Use the Makefile.msvc in the examples/ directory.
	To build all examples use
	nmake -f Makefile.msvc all
        To build example XY use
	nmake -f Makefile.msvc exampleXY

	The makefile requires the libcurlpp.lib file to be in the examples/ 
	directory; after building curlpp copy it here. 


Giuseppe "Cowo" Corbelli, cowo at lugbs dot linux dot it
Andrei Korostelev, andrei at korostelev dot net
Piotr Dobrogost, curlpp at autoera dot pl	(November, 2008)